name: CI

on:
  push:
    branches-ignore:
      - 'main'
      - 'docs'

env:
  BUILDER_VERSION: v0.9.21
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-iot-device-sdk-cpp-v2
  LINUX_BASE_IMAGE: ubuntu-18-x64
  HEAD_REF: ${{ github.head_ref }}
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_DEFAULT_REGION: us-east-1
  DA_TOPIC: test/da
  DA_SHADOW_PROPERTY: datest
  DA_SHADOW_VALUE_SET: ON
  DA_SHADOW_VALUE_DEFAULT: OFF
  CI_FOLDER: "D:/a/work"
  CI_UTILS_FOLDER: "./aws-iot-device-sdk-cpp-v2/utils"
  CI_SAMPLES_CFG_FOLDER: "./aws-iot-device-sdk-cpp-v2/.github/workflows"
  CI_IOT_CONTAINERS: arn:aws:iam::123124136734:role/CRT_IoT_Containers
  CI_PUBSUB_ROLE: arn:aws:iam::180635532705:role/CI_PubSub_Role
  CI_CYCLEPUBSUB_ROLE: arn:aws:iam::180635532705:role/CI_CyclePubSub_Role
  CI_CUSTOM_AUTHORIZER_ROLE: arn:aws:iam::180635532705:role/CI_CustomAuthorizer_Role
  CI_COGNITO_ROLE: arn:aws:iam::180635532705:role/CI_Cognito_Role
  CI_SHADOW_ROLE: arn:aws:iam::180635532705:role/CI_Shadow_Role
  CI_JOBS_ROLE: arn:aws:iam::180635532705:role/CI_Jobs_Role
  CI_FLEET_PROVISIONING_ROLE: arn:aws:iam::180635532705:role/service-role/CI_FleetProvisioning_Role
  CI_DEVICE_ADVISOR: arn:aws:iam::180635532705:role/CI_DeviceAdvisor_Role
  CI_DEVICE_DEFENDER: arn:aws:iam::180635532705:role/CI_DeviceDefender_Role
  CI_SECURE_TUNNEL: arn:aws:iam::180635532705:role/CI_SecureTunnel_Role
  CI_X509_ROLE: arn:aws:iam::180635532705:role/CI_X509_Role
  CI_MQTT5_ROLE: arn:aws:iam::180635532705:role/CI_MQTT5_Role
  CI_GREENGRASS_ROLE: arn:aws:iam::180635532705:role/CI_Greengrass_Role

jobs:
  osx:
    runs-on: macos-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      security-events: write # This is required for pkcs12 sample to sign the key
    steps:
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')"
          chmod a+x builder
          ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream
      - name: Running samples in CI setup
        run: |
          python3 -m pip install boto3
      - name: configure AWS credentials (PubSub)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run PKCS12 sample
        run: |
          cert=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/PubSub/cert" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\") && echo -e "$cert" > /tmp/certificate.pem
          key=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/PubSub/key" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\") && echo -e "$key" > /tmp/privatekey.pem
          pkcs12_password=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/PubSub/key_pkcs12_password" --query "SecretString" | cut -f2 -d":" | cut -f2 -d\")
          openssl pkcs12 -export -in /tmp/certificate.pem -inkey /tmp/privatekey.pem -out ./pkcs12-key.p12 -name PubSub_Thing_Alias -password pass:$pkcs12_password
          python3 ${{ env.CI_UTILS_FOLDER }}/run_sample_ci.py --file ${{ env.CI_SAMPLES_CFG_FOLDER }}/ci_run_pkcs12_connect_cfg.json
